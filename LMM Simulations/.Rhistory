control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.beta <- getME(fit, "beta")[-6]
this.re <- lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% t
coefs[i, ] <- rbind(this.beta, this.re, sigma(fit))
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(coefs)
}
testing_results <- testing %>%
mutate(coefs = map(df, lmm_wrap))
warnings()
class(this.beta)
getME(fit, "beta")
getME(fit, "beta") %>% class
rbind(getME(fit, "beta"), 12)
pd_check <- function(sigma.i, sigma.s){
sigma <- matrix(
c(sigma.i ^ 2, rho * sigma.i * sigma.s,
rho * sigma.i * sigma.s, sigma.s ^ 2),
nrow = 2, byrow = T
)
out <- 0
if(all(eigen(sigma)$value > 0)) out <- 1
}
pd_check(5,2)
pd_check <- function(sigma.i, sigma.s, rho){
sigma <- matrix(
c(sigma.i ^ 2, rho * sigma.i * sigma.s,
rho * sigma.i * sigma.s, sigma.s ^ 2),
nrow = 2, byrow = T
)
out <- 0
if(all(eigen(sigma)$value > 0)) out <- 1
}
pd_check(5,2,.2)
pd_check <- function(sigma.i, sigma.s, rho){
sigma <- matrix(
c(sigma.i ^ 2, rho * sigma.i * sigma.s,
rho * sigma.i * sigma.s, sigma.s ^ 2),
nrow = 2, byrow = T
)
flag <- 0
if(all(eigen(sigma)$value > 0)) flag <- 1
return(flag)
}
pd_check(5,2,.2)
pd_check(2,5,.2)
# check for positive-definiteness
pd_check <- function(sigma.i, sigma.s, rho){
sigma <- matrix(
c(sigma.i ^ 2, rho * sigma.i * sigma.s,
rho * sigma.i * sigma.s, sigma.s ^ 2),
nrow = 2, byrow = T
)
flag <- 0
if(all(eigen(sigma)$value > 0)) flag <- 1
return(flag)
}
testing <- crossing(
sigma.i = c(5, 10, 20),
sigma.s = c(2, 5, 10),
rho = c(0.2, 0.6),
eps = c(2, 5, 10)
) %>%
mutate(id = glue::glue("re.i = {sigma.i}, re.s = {sigma.s}, corr = {rho}, epsilon = {eps}"),
r = row_number(),
flag = pmap_dbl(list(sigma.i, sigma.s, rho), pd_check)) %>%
group_by(id, flag) %>%
nest() %>%
rename(df=data) %>%
ungroup
View(testing)
# Begin function - write out progress bars and empty vector
empty <- rep(NA, 250)
pb <- progress::progress_bar$new(total = nrow(testing))
pb_loop <- progress::progress_bar$new(total = 250)
lmm_wrap <- function(df){
sigma.i <- df$sigma.i
sigma.s <- df$sigma.s
rho <- df$rho
eps <- df$eps
message("i=",sigma.i," s=", sigma.s, " rho=", rho, " eps=", eps)
pb$tick()
coefs <- data.frame(b0=empty, b1 = empty, b21 = empty, b22 = empty, b3 = empty,
# SDs
sigma.i = empty, sigma.s = empty, eps = empty)
for(i in 1:250){
# Simulate data
this.dat <- lmm_sim(sigma.i = sigma.i,
sigma.s = sigma.s,
epsilon = eps, rho = rho)
# Fit model
fit <- lmer(Y ~ x1 + x2 + x3 + time + (1|id) + (0 + time|id), data = this.dat,
control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.beta <- getME(fit, "beta")[-6]
this.re <- lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% t
coefs[i, ] <- cbind(this.beta, this.re, sigma(fit))
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(coefs)
}
lmm_wrap <- function(df){
sigma.i <- df$sigma.i
sigma.s <- df$sigma.s
rho <- df$rho
eps <- df$eps
# Mainly for debugging
message("i=",sigma.i," s=", sigma.s, " rho=", rho, " eps=", eps)
pb$tick()
# Intialise empty df of parameters
params <- data.frame(b0=empty, b1 = empty, b21 = empty, b22 = empty, b3 = empty,
# SDs
sigma.i = empty, sigma.s = empty, eps = empty)
for(i in 1:250){
# Simulate data
this.dat <- lmm_sim(sigma.i = sigma.i,
sigma.s = sigma.s,
epsilon = eps, rho = rho)
# Fit model
fit <- lmer(Y ~ x1 + x2 + x3 + time + (1|id) + (0 + time|id), data = this.dat,
control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.beta <- getME(fit, "beta")[-6]
this.re <- lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% t
params[i, ] <- cbind(this.beta, this.re, sigma(fit))
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(params)
}
testing_results <- testing %>%
mutate(params = map(df, lmm_wrap))
cbind(getME(fit, "beta")[-6], lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% t, sigma(fit))
c(getME(fit, "beta")[-6], lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% t, sigma(fit))
tidy(fit)
c(getME(fit, "beta")[-6], sigma(fit))
c(getME(fit, "beta")[-6], lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>% unlist() %>%  t, sigma(fit))
lmm_wrap <- function(df){
sigma.i <- df$sigma.i
sigma.s <- df$sigma.s
rho <- df$rho
eps <- df$eps
# Mainly for debugging
message("i=",sigma.i," s=", sigma.s, " rho=", rho, " eps=", eps)
pb$tick()
# Intialise empty df of parameters
params <- data.frame(b0=empty, b1 = empty, b21 = empty, b22 = empty, b3 = empty,
# SDs
sigma.i = empty, sigma.s = empty, eps = empty)
for(i in 1:250){
# Simulate data
this.dat <- lmm_sim(sigma.i = sigma.i,
sigma.s = sigma.s,
epsilon = eps, rho = rho)
# Fit model
fit <- lmer(Y ~ x1 + x2 + x3 + time + (1|id) + (0 + time|id), data = this.dat,
control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.beta <- getME(fit, "beta")[-6]
this.re <- lapply(summary(fit)$varcor, function(x) attr(x, "stddev")) %>%
unlist() %>% t()
params[i, ] <- cbind(this.beta, this.re, sigma(fit))
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(params)
}
testing_results <- testing %>%
mutate(params = map(df, lmm_wrap))
tidy(fit)
tidy(fit)
tidy(fit) %>%
filter(str_detect(term, "^x|^sd"))
tidy(fit) %>%
filter(str_detect(term, "^x|^sd")) %>%
pull(estimate)
# Begin function - write out progress bars and empty vector
empty <- rep(NA, 250)
pb <- progress::progress_bar$new(total = nrow(testing))
pb_loop <- progress::progress_bar$new(total = 250)
lmm_wrap <- function(df){
sigma.i <- df$sigma.i
sigma.s <- df$sigma.s
rho <- df$rho
eps <- df$eps
# Mainly for debugging
message("i=",sigma.i," s=", sigma.s, " rho=", rho, " eps=", eps)
pb$tick()
# Intialise empty df of parameters
params <- data.frame(b1 = empty, b21 = empty, b22 = empty, b3 = empty,
# SDs
sigma.i = empty, sigma.s = empty, eps = empty)
for(i in 1:250){
# Simulate data
this.dat <- lmm_sim(sigma.i = sigma.i,
sigma.s = sigma.s,
epsilon = eps, rho = rho)
# Fit model
fit <- lmer(Y ~ x1 + x2 + x3 + time + (1|id) + (0 + time|id), data = this.dat,
control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.fit <- tidy(fit)
this.param <- this.fit %>%
filter(str_detect(term, "^x|^sd")) %>%
pull(estimate)
params[i, ] <- this.param
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(params)
}
testing_results <- testing %>%
mutate(params = map(df, lmm_wrap))
map(testing$df, lmm_wrap)
# Begin function
empty <- rep(NA, 250)
lmm_wrap <- function(df){
sigma.i <- df$sigma.i
sigma.s <- df$sigma.s
rho <- df$rho
eps <- df$eps
# Mainly for debugging
message(round(df$r/nrow(testing) * 100), "%")
message("i=",sigma.i," s=", sigma.s, " rho=", rho, " eps=", eps)
# Intialise empty df of parameters
params <- data.frame(b1 = empty, b21 = empty, b22 = empty, b3 = empty,
# SDs
sigma.i = empty, sigma.s = empty, eps = empty)
pb_loop <- progress::progress_bar$new(total = 250)
for(i in 1:250){
# Simulate data
this.dat <- lmm_sim(sigma.i = sigma.i,
sigma.s = sigma.s,
epsilon = eps, rho = rho)
# Fit model
fit <- lmer(Y ~ x1 + x2 + x3 + time + (1|id) + (0 + time|id), data = this.dat,
control = lmerControl(optimizer = "Nelder_Mead"))
# Get parameter estimates
this.fit <- tidy(fit)
this.param <- this.fit %>%
filter(str_detect(term, "^x|^sd")) %>%
pull(estimate)
params[i, ] <- this.param
# Print progress
pb_loop$tick()
if(i %/% 100 > 0 && i %% 100 == 0){
message("\n---\nIteration ", i, " done")
}
}
return(params)
}
testing_results <- testing %>%
mutate(params = map(df, lmm_wrap))
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
arrange(sigma.i, sigma.s, rho, eps)
testing_results2
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
arrange(sigma.i, sigma.s, rho, eps) %>%
select(-sigma.i, -sigma.s, -eps) %>%
unnest(params)
testing_results2
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
arrange(sigma.i, sigma.s, rho, eps) %>%
select(-sigma.i, -sigma.s, -eps) %>%
unnest(params) %>%
mutate(id = fct_inorder(id)) %>%
select(-flag, -rho, -r) %>%
gather("parameter", "estimate", -id)
testing_results2
testing_results2 %>% distinct(parameter) %>% pull
testing_results2
testing_results2 %>%
mutate(
parameter2 = factor(term,
levels = c("b1","b22","b23","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[21]),
expression(beta[22]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b22","b23","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[21]),
expression(beta[22]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b222","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b22","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
filter(rho == 0.2, epsilon %in% c(5, 10))
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
filter(rho == 0.2, epsilon %in% c(5, 10)) %>%
arrange(sigma.i, sigma.s, rho, eps) %>%
select(-sigma.i, -sigma.s, -eps) %>%
unnest(params) %>%
mutate(id = fct_inorder(id)) %>%
select(-flag, -rho, -r) %>%
gather("parameter", "estimate", -id)
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b22","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
filter(rho == 0.2, epsilon %in% c(5, 10)) %>%
arrange(sigma.i, sigma.s, rho, eps) %>%
select(-sigma.i, -sigma.s, -eps) %>%
unnest(params) %>%
mutate(id = fct_inorder(id)) %>%
select(-flag, -rho, -r) %>%
gather("parameter", "estimate", -id)
testing_results
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
filter(rho == 0.2, epsilon %in% c(5, 10))
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df)
testing_results2 <- testing_results %>%
ungroup %>%
unnest(df) %>%
filter(rho == 0.2, eps %in% c(5, 10)) %>%
arrange(sigma.i, sigma.s, rho, eps) %>%
select(-sigma.i, -sigma.s, -eps) %>%
unnest(params) %>%
mutate(id = fct_inorder(id)) %>%
select(-flag, -rho, -r) %>%
gather("parameter", "estimate", -id)
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b22","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
)
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2$id
str_remove(testing_results2$id, "corr.*\\,")
str_remove(testing_results2$id, "corr.*\\, ")
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b22","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
),
id = str_remove(id, "rho.*\\, ")
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
testing_results2 %>%
mutate(
parameter2 = factor(parameter,
levels = c("b1","b21","b22","b3","sigma.i",
"sigma.s","eps"),
labels = c(expression(beta[1]),
expression(beta[22]),
expression(beta[23]),
expression(beta[3]),
expression(sigma[i]),
expression(sigma[t]),
expression(epsilon))
),
id = str_remove(id, "corr.*\\, ")
) %>%
ggplot(aes(x = estimate, colour = id)) +
geom_density() +
facet_wrap(~parameter2, scales = "free", labeller = label_parsed) +
labs(colour = "") +
theme(legend.position = "bottom",
strip.text = element_text(size = 12, colour = "black"),
strip.background = element_blank())
ggsave("./LMM_Epsilon_Sigma2.png")
